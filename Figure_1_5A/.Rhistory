model_result2 <- model_result1[
with(model_result1, order(value, pval)),] %>%
filter(pval < 1.0)
models_list <-  append(models_list, list(model_result2)) }
models_1 <- lapply(models_list, function(x) cbind(" "=rownames(x), x))
## Writes to multi sheet excel file ###
writexl::write_xlsx(models_1, here(location, paste("results", ".xlsx", sep="")) )
writexl::write_xlsx(models_1, here(results, paste(location , ".xlsx", sep=" ")) )
}
location
recurrence_type <- "rec.diagnosis.Wk8"
## Can take values "treatment","treatment response","interaction treatment response", "response", "prepost response"
#if(conduct_abx != "Abx"){
#  modelling <- "prepost response"
#  }
#modelling <- "prepost response"
modelling <- "treatment Abx"
## When conduct_abx = "Abx", can take value "treatment Abx"
#if(conduct_abx == "Abx"){modelling <- "treatment Abx"}
param_choice <- "LOG"
if(param_choice == "AST"){params <- c("NONE", "AST")}
if(param_choice == "LOG"){params <- c("NONE","LOG")}
if(param_choice == "CLR"){params <- c("CLR", "NONE")}
modelling
run_maaslin <- "Yes"
print("the models available to run including different data cuts, pre/post recurrence and pre/post antibiotics samples ~")
model_description
print("The code in the next chunk runs the model using data up to Day 14, and excluding samples collected after a recurrence")
if(run_maaslin == "Yes"){
countvec <- c(4) # Choose the model that uses data up to Day 14, and excluding samples collected after a recurrence
#  countvec <- c(1,2,3,4,5,6)
if(modelling== "prepost response"){
for (cvec in countvec) {
VE303_sp.all_Maaslin_test <- Arrays[[cvec]]
model_type <- model_description[cvec]
VE303_sp_div <- c(VE303_sp, "shannon_diversity")
ve303_organism <- VE303_sp.all_Maaslin_test[VE303_sp]
ve303_organism$VE303_total <- rowSums(ve303_organism)
pseudo <- 0.00001
if(params[2] == "LOG"){ve303_organism == pseudo + ve303_organism}
ve303_organism$shannon_diversity <- VE303_sp.all_Maaslin_test$shannon_diversity
ve303_metadata <- VE303_sp.all_Maaslin_test[colpick.all]
ve303_organism <- data.frame(ve303_organism)
rownames(ve303_organism) <- rownames(ve303_organism)
ve303_metadata <- data.frame(ve303_metadata)
rownames(ve303_metadata) <- rownames(ve303_metadata)
if(treats == "Dosed"){fixed <- c("collect.pre.post.rec", "TRT.norm" , "Abx.group_joined_M" ,"Batch")
ref_level <- c(  "collect.pre.post.rec,No.rec","Batch,1")}
if(treats == "Dosed and Placebo"){fixed <- c("TRT.norm", "Batch", "Abx.group_joined_M")
ref_level <- c(  "TRT.norm,Placebo","Batch,1")}
fit_data2 = Maaslin2(
input_data = ve303_organism,
input_metadata = ve303_metadata,
normalization = params[1],
transform = params[2],
output = paste(Sys.Date(), treats,taxplot ,modelling, param_choice, model_type,sep = " "),
fixed_effects = fixed,
reference = ref_level,
random_effects = c("Subject.Number"))
}
}
if(conduct_abx == "Abx"){
if(modelling == "treatment Abx"){
for (cvec in countvec) {
VE303_sp.all_Maaslin_test <- Arrays[[cvec]]
model_type <- model_description[cvec]
VE303_sp_div <- c(VE303_sp, "shannon_diversity")
ve303_organism <- VE303_sp.all_Maaslin_test[VE303_sp]
ve303_organism$VE303_total <- rowSums(ve303_organism)
pseudo <- 0.00001
if(params[2] == "LOG"){ve303_organism == pseudo + ve303_organism}
ve303_organism$shannon_diversity <- VE303_sp.all_Maaslin_test$shannon_diversity
ve303_metadata <- VE303_sp.all_Maaslin_test[colpick.all]
ve303_organism <- data.frame(ve303_organism)
rownames(ve303_organism) <- rownames(ve303_organism)
ve303_metadata <- data.frame(ve303_metadata)
rownames(ve303_metadata) <- rownames(ve303_metadata)
if(treats == "Dosed"){fixed <- c("TRT.norm", "Batch", "Abx.group_joined_M")
ref_level <- c(  "Batch,1")}
if(treats == "Dosed and Placebo"){fixed <- c("TRT.norm", "Batch", "Abx.group_joined_M")
ref_level <- c(  "TRT.norm,Placebo","Batch,1")}
fit_data2 = Maaslin2(
input_data = ve303_organism,
input_metadata = ve303_metadata,
normalization =  params[1],
transform =  params[2],
output = paste(Sys.Date(), treats, taxplot, modelling,  param_choice,model_type,sep = " "),
fixed_effects = fixed,
reference =  ref_level,
random_effects = c("Subject.Number"))
}
}
}
}
if(conduct_abx == "Abx"){
if(taxplot == "Pre Abx"){
model_type <- "Exclude post-recurrence_D14"
location <- paste(Sys.Date(), treats, taxplot,modelling, "LOG", model_type,sep = " ")
location_data <- paste(location ,"all_results.tsv",sep = "/")}
model_result <- read_tsv(here(location_data))
models_list <- list()
for (x1 in (model_result$metadata %>% unique())) {
model_result1 <- model_result %>%
filter(metadata == x1)
model_result2 <- model_result1[
with(model_result1, order(value, pval)),] %>%
filter(pval < 1.0)
models_list <-  append(models_list, list(model_result2)) }
models_1 <- lapply(models_list, function(x) cbind(" "=rownames(x), x))
## Writes to multi sheet excel file ###
writexl::write_xlsx(models_1, here(location, paste("results", ".xlsx", sep="")) )
writexl::write_xlsx(models_1, here(results, paste(location , ".xlsx", sep=" ")) )
}
treats <- "Dosed and Placebo"
#treats <- "Dosed"
if(treats == "Dosed and Placebo"){
Arr_out <- prepMaaslin(VE303_sp.all_Maaslin)
Arrays <- Arr_out[[1]]
models <- Arr_out[[2]]
model_description <- Arr_out[[3]]
}
# ARRAY FOR DOSED COMPARISON HD VS LD ONLY, ALL TIMEPOINTS #
if(treats == "Dosed"){
VE303_sp.all_Maaslin_filtered <- VE303_sp.all_Maaslin %>% filter(TRT.norm != "Placebo")
Arr_out <- prepMaaslin(VE303_sp.all_Maaslin_filtered)
Arrays <- Arr_out[[1]]
models <- Arr_out[[2]]
model_description <- Arr_out[[3]]
}
recurrence_type <- "rec.diagnosis.Wk8"
## Can take values "treatment","treatment response","interaction treatment response", "response", "prepost response"
#if(conduct_abx != "Abx"){
#  modelling <- "prepost response"
#  }
#modelling <- "prepost response"
modelling <- "treatment Abx"
## When conduct_abx = "Abx", can take value "treatment Abx"
#if(conduct_abx == "Abx"){modelling <- "treatment Abx"}
param_choice <- "LOG"
if(param_choice == "AST"){params <- c("NONE", "AST")}
if(param_choice == "LOG"){params <- c("NONE","LOG")}
if(param_choice == "CLR"){params <- c("CLR", "NONE")}
modelling
run_maaslin <- "Yes"
print("the models available to run including different data cuts, pre/post recurrence and pre/post antibiotics samples ~")
model_description
print("The code in the next chunk runs the model using data up to Day 14, and excluding samples collected after a recurrence")
if(run_maaslin == "Yes"){
countvec <- c(4) # Choose the model that uses data up to Day 14, and excluding samples collected after a recurrence
#  countvec <- c(1,2,3,4,5,6)
if(modelling== "prepost response"){
for (cvec in countvec) {
VE303_sp.all_Maaslin_test <- Arrays[[cvec]]
model_type <- model_description[cvec]
VE303_sp_div <- c(VE303_sp, "shannon_diversity")
ve303_organism <- VE303_sp.all_Maaslin_test[VE303_sp]
ve303_organism$VE303_total <- rowSums(ve303_organism)
pseudo <- 0.00001
if(params[2] == "LOG"){ve303_organism == pseudo + ve303_organism}
ve303_organism$shannon_diversity <- VE303_sp.all_Maaslin_test$shannon_diversity
ve303_metadata <- VE303_sp.all_Maaslin_test[colpick.all]
ve303_organism <- data.frame(ve303_organism)
rownames(ve303_organism) <- rownames(ve303_organism)
ve303_metadata <- data.frame(ve303_metadata)
rownames(ve303_metadata) <- rownames(ve303_metadata)
if(treats == "Dosed"){fixed <- c("collect.pre.post.rec", "TRT.norm" , "Abx.group_joined_M" ,"Batch")
ref_level <- c(  "collect.pre.post.rec,No.rec","Batch,1")}
if(treats == "Dosed and Placebo"){fixed <- c("TRT.norm", "Batch", "Abx.group_joined_M")
ref_level <- c(  "TRT.norm,Placebo","Batch,1")}
fit_data2 = Maaslin2(
input_data = ve303_organism,
input_metadata = ve303_metadata,
normalization = params[1],
transform = params[2],
output = paste(Sys.Date(), treats,taxplot ,modelling, param_choice, model_type,sep = " "),
fixed_effects = fixed,
reference = ref_level,
random_effects = c("Subject.Number"))
}
}
if(conduct_abx == "Abx"){
if(modelling == "treatment Abx"){
for (cvec in countvec) {
VE303_sp.all_Maaslin_test <- Arrays[[cvec]]
model_type <- model_description[cvec]
VE303_sp_div <- c(VE303_sp, "shannon_diversity")
ve303_organism <- VE303_sp.all_Maaslin_test[VE303_sp]
ve303_organism$VE303_total <- rowSums(ve303_organism)
pseudo <- 0.00001
if(params[2] == "LOG"){ve303_organism == pseudo + ve303_organism}
ve303_organism$shannon_diversity <- VE303_sp.all_Maaslin_test$shannon_diversity
ve303_metadata <- VE303_sp.all_Maaslin_test[colpick.all]
ve303_organism <- data.frame(ve303_organism)
rownames(ve303_organism) <- rownames(ve303_organism)
ve303_metadata <- data.frame(ve303_metadata)
rownames(ve303_metadata) <- rownames(ve303_metadata)
if(treats == "Dosed"){fixed <- c("TRT.norm", "Batch", "Abx.group_joined_M")
ref_level <- c(  "Batch,1")}
if(treats == "Dosed and Placebo"){fixed <- c("TRT.norm", "Batch", "Abx.group_joined_M")
ref_level <- c(  "TRT.norm,Placebo","Batch,1")}
fit_data2 = Maaslin2(
input_data = ve303_organism,
input_metadata = ve303_metadata,
normalization =  params[1],
transform =  params[2],
output = paste(Sys.Date(), treats, taxplot, modelling,  param_choice,model_type,sep = " "),
fixed_effects = fixed,
reference =  ref_level,
random_effects = c("Subject.Number"))
}
}
}
}
if(conduct_abx == "Abx"){
if(taxplot == "Pre Abx"){
model_type <- "Exclude post-recurrence_D14"
location <- paste(Sys.Date(), treats, taxplot,modelling, "LOG", model_type,sep = " ")
location_data <- paste(location ,"all_results.tsv",sep = "/")}
model_result <- read_tsv(here(location_data))
models_list <- list()
for (x1 in (model_result$metadata %>% unique())) {
model_result1 <- model_result %>%
filter(metadata == x1)
model_result2 <- model_result1[
with(model_result1, order(value, pval)),] %>%
filter(pval < 1.0)
models_list <-  append(models_list, list(model_result2)) }
models_1 <- lapply(models_list, function(x) cbind(" "=rownames(x), x))
## Writes to multi sheet excel file ###
writexl::write_xlsx(models_1, here(location, paste("results", ".xlsx", sep="")) )
writexl::write_xlsx(models_1, here(results, paste(location , ".xlsx", sep=" ")) )
}
models_1
models_1[[1]]
models_1
model_type <- "Exclude post-recurrence_D14"
location <- paste(Sys.Date(),treats,  taxplot,modelling, "LOG", model_type,sep = " ")
location_data <- paste(location ,"all_results.tsv",sep = "/")
location_data
model_type <- "Exclude post-recurrence_D14"
location <- paste(Sys.Date(),treats,  taxplot,modelling, "LOG", model_type,sep = " ")
location_data <- paste(location ,"all_results.tsv",sep = "/")
location_data
model_result <- read_tsv(here(location_data))
treats
if(conduct_abx == "Abx"){
if(taxplot == "Pre Abx"){
model_type <- "Exclude post-recurrence_D14"
location <- paste(Sys.Date(), treats, taxplot,modelling, "LOG", model_type,sep = " ")
location_data <- paste(location ,"all_results.tsv",sep = "/")}
model_result <- read_tsv(here(location_data))
models_list <- list()
for (x1 in (model_result$metadata %>% unique())) {
model_result1 <- model_result %>%
filter(metadata == x1)
model_result2 <- model_result1[
with(model_result1, order(value, pval)),] %>%
filter(pval < 1.0)
models_list <-  append(models_list, list(model_result2)) }
models_1 <- lapply(models_list, function(x) cbind(" "=rownames(x), x))
## Writes to multi sheet excel file ###
writexl::write_xlsx(models_1, here(location, paste("results", ".xlsx", sep="")) )
writexl::write_xlsx(models_1, here(results, paste(treats ,"Table S1.xlsx", sep=" ")) )
}
if(conduct_abx == "Abx"){
if(taxplot == "Pre Abx"){
model_type <- "Exclude post-recurrence_D14"
location <- paste(Sys.Date(), "Dosed", taxplot,modelling, "LOG", model_type,sep = " ")
#  location <- paste(Sys.Date(), "Dosed and Placebo", taxplot,modelling, "LOG", model_type,sep = " ")
location_data <- paste(location ,"all_results.tsv",sep = "/")}
model_result <- read_tsv(here(location_data))
models_list <- list()
for (x1 in (model_result$metadata %>% unique())) {
model_result1 <- model_result %>%
filter(metadata == x1)
model_result2 <- model_result1[
with(model_result1, order(value, pval)),] %>%
filter(pval < 1.0)
models_list <-  append(models_list, list(model_result2)) }
models_1 <- lapply(models_list, function(x) cbind(" "=rownames(x), x))
## Writes to multi sheet excel file ###
writexl::write_xlsx(models_1, here(location, paste("results", ".xlsx", sep="")) )
writexl::write_xlsx(models_1, here(results, paste(treats ,"Table S1.xlsx", sep=" ")) )
}
location_data <- paste(location ,"all_results.tsv",sep = "/")}
#treats <- "Dosed"
treats <- "Dosed and Placebo"
if(conduct_abx == "Abx"){
if(taxplot == "Pre Abx"){
model_type <- "Exclude post-recurrence_D14"
location <- paste(Sys.Date(), treats, taxplot,modelling, "LOG", model_type,sep = " ")
location_data <- paste(location ,"all_results.tsv",sep = "/")}
model_result <- read_tsv(here(location_data))
models_list <- list()
for (x1 in (model_result$metadata %>% unique())) {
model_result1 <- model_result %>%
filter(metadata == x1)
model_result2 <- model_result1[
with(model_result1, order(value, pval)),] %>%
filter(pval < 1.0)
models_list <-  append(models_list, list(model_result2)) }
models_1 <- lapply(models_list, function(x) cbind(" "=rownames(x), x))
## Writes to multi sheet excel file ###
writexl::write_xlsx(models_1, here(location, paste("results", ".xlsx", sep="")) )
writexl::write_xlsx(models_1, here(results, paste(treats ,"Table S1.xlsx", sep=" ")) )
}
treats <- "Dosed"
#treats <- "Dosed and Placebo"
if(conduct_abx == "Abx"){
if(taxplot == "Pre Abx"){
model_type <- "Exclude post-recurrence_D14"
location <- paste(Sys.Date(), treats, taxplot,modelling, "LOG", model_type,sep = " ")
location_data <- paste(location ,"all_results.tsv",sep = "/")}
model_result <- read_tsv(here(location_data))
models_list <- list()
for (x1 in (model_result$metadata %>% unique())) {
model_result1 <- model_result %>%
filter(metadata == x1)
model_result2 <- model_result1[
with(model_result1, order(value, pval)),] %>%
filter(pval < 1.0)
models_list <-  append(models_list, list(model_result2)) }
models_1 <- lapply(models_list, function(x) cbind(" "=rownames(x), x))
## Writes to multi sheet excel file ###
writexl::write_xlsx(models_1, here(location, paste("results", ".xlsx", sep="")) )
writexl::write_xlsx(models_1, here(results, paste(treats ,"Table S1.xlsx", sep=" ")) )
}
treats <- "Dosed"
#treats <- "Dosed and Placebo"
if(conduct_abx == "Abx"){
if(taxplot == "Pre Abx"){
model_type <- "Exclude post-recurrence_D14"
location <- paste(Sys.Date(), treats, taxplot,modelling, "LOG", model_type,sep = " ")
location_data <- paste(location ,"all_results.tsv",sep = "/")}
model_result <- read_tsv(here(location_data))
models_list <- list()
for (x1 in (model_result$metadata %>% unique())) {
model_result1 <- model_result %>%
filter(metadata == x1)
model_result2 <- model_result1[
with(model_result1, order(value, pval)),] %>%
filter(pval < 1.0)
models_list <-  append(models_list, list(model_result2)) }
models_1 <- lapply(models_list, function(x) cbind(" "=rownames(x), x))
## Writes to multi sheet excel file ###
writexl::write_xlsx(models_1, here(location, paste("results", ".xlsx", sep="")) )
writexl::write_xlsx(models_1, here(results, paste(treats ,"LME Table S1.xlsx", sep=" ")) )
}
treats <- "Dosed"
treats <- "Dosed and Placebo"
if(conduct_abx == "Abx"){
if(taxplot == "Pre Abx"){
model_type <- "Exclude post-recurrence_D14"
location <- paste(Sys.Date(), treats, taxplot,modelling, "LOG", model_type,sep = " ")
location_data <- paste(location ,"all_results.tsv",sep = "/")}
model_result <- read_tsv(here(location_data))
models_list <- list()
for (x1 in (model_result$metadata %>% unique())) {
model_result1 <- model_result %>%
filter(metadata == x1)
model_result2 <- model_result1[
with(model_result1, order(value, pval)),] %>%
filter(pval < 1.0)
models_list <-  append(models_list, list(model_result2)) }
models_1 <- lapply(models_list, function(x) cbind(" "=rownames(x), x))
## Writes to multi sheet excel file ###
writexl::write_xlsx(models_1, here(location, paste("results", ".xlsx", sep="")) )
writexl::write_xlsx(models_1, here(results, paste(treats ,"LME Table S1.xlsx", sep=" ")) )
}
####################################################################################################
## As this analysis is for a single timepoint, and there's a duplicate from an unscheduled event in the LD group
VE303_sp1.total  <- VE303_sp1.total %>% distinct(Subject.Number, .keep_all = TRUE)
VE303_sp1.total_LD <- VE303_sp1.total %>% filter(Treatment == "2")
VE303_sp1.total_HD <- VE303_sp1.total %>% filter(Treatment == "3")
VE303_sp1.total_PL <- VE303_sp1.total %>% filter(Treatment == "1")
#FUNCTION
compare_cohort_ttest <- function(V1, V2, comparison){
all_p <- c()
all_stat <- c()
tt_VE303tot_abun <-
t.test(log10(V1$ve303_tot + 0.00001), log10(V2$ve303_tot + 0.00001))
pv_abun_tot <- tt_VE303tot_abun$p.value
stat_abun_tot <- tt_VE303tot_abun$statistic
tt_VE303tot_prop <- t.test( (V1$ve303_tot_prop ),  (V2$ve303_tot_prop ))
pv_prop_tot <- tt_VE303tot_prop$p.value
stat_prop_tot <- tt_VE303tot_prop$statistic
tt_VE303tot_prev  <- t.test(sign(V1$ve303_tot),sign(V2$ve303_tot))
pv_prev_tot <- tt_VE303tot_prev$p.value
stat_prev_tot <- tt_VE303tot_prev$statistic
ttest_df <- data.frame(comparison,pv_abun_tot, stat_abun_tot, pv_prop_tot,
stat_prop_tot, pv_prev_tot, stat_prev_tot)
names(ttest_df) <- c("Comparison","p-value Abundance", "t-Statistic Abundance",
"p-value Proportion", "t-Statistic Proportion",
"p-value Prevalence", "t-Statistic Prevalence")
return(ttest_df)
}
compare_cohort_wilcox <- function(V1, V2, comparison){
all_p <- c()
all_stat <- c()
tt_VE303tot_abun <- wilcox.test(log10(V1$ve303_tot + 0.00001),
log10(V2$ve303_tot + 0.00001) , conf.int = TRUE)
pv_abun_tot <- tt_VE303tot_abun$p.value
stat_abun_tot <- tt_VE303tot_abun$estimate
tt_VE303tot_prop <- wilcox.test( (V1$ve303_tot_prop ),  (V2$ve303_tot_prop ), conf.int = TRUE)
pv_prop_tot <- tt_VE303tot_prop$p.value
stat_prop_tot <- tt_VE303tot_prop$estimate
tt_VE303tot_prev  <- wilcox.test(sign(V1$ve303_tot),sign(V2$ve303_tot), conf.int = TRUE)
pv_prev_tot <- tt_VE303tot_prev$p.value
stat_prev_tot <- tt_VE303tot_prev$estimate
wilcox_df <- data.frame(comparison,pv_abun_tot, stat_abun_tot, pv_prop_tot,
stat_prop_tot, pv_prev_tot, stat_prev_tot)
names(wilcox_df) <- c("Comparison","p-value Abundance", "t-Statistic Abundance",
"p-value Proportion", "t-Statistic Proportion",
"p-value Prevalence", "t-Statistic Prevalence")
return(wilcox_df)
}
result_LD_HD <- compare_cohort_ttest(VE303_sp1.total_LD, VE303_sp1.total_HD, "LD vs HD")
result_PL_HD <- compare_cohort_ttest(VE303_sp1.total_PL, VE303_sp1.total_HD, "Placebo vs HD")
result_PL_LD <- compare_cohort_ttest(VE303_sp1.total_PL, VE303_sp1.total_LD, "Placebo vs LD")
result_all_t <- rbind(result_LD_HD, result_PL_HD, result_PL_LD)
result_all_t$`p-adjust Abundance` <-  p.adjust( (result_all_t$`p-value Abundance`), method = "BH")
result_all_t$`p-adjust Proportion` <-  p.adjust( (result_all_t$`p-value Proportion`), method = "BH")
result_all_t$`p-adjust Prevalence` <-  p.adjust( (result_all_t$`p-value Prevalence`), method = "BH")
result_LD_HD <- compare_cohort_wilcox(VE303_sp1.total_LD, VE303_sp1.total_HD, "LD vs HD")
result_PL_HD <- compare_cohort_wilcox(VE303_sp1.total_PL, VE303_sp1.total_HD, "Placebo vs HD")
result_PL_LD <- compare_cohort_wilcox(VE303_sp1.total_PL, VE303_sp1.total_LD, "Placebo vs LD")
result_all_wil <- rbind(result_LD_HD, result_PL_HD, result_PL_LD)
result_all_wil$`p-adjust Abundance` <-  p.adjust( (result_all_wil$`p-value Abundance`), method = "BH")
result_all_wil$`p-adjust Proportion` <-  p.adjust( (result_all_wil$`p-value Proportion`), method = "BH")
result_all_wil$`p-adjust Prevalence` <-  p.adjust( (result_all_wil$`p-value Prevalence`), method = "BH")
write.xlsx(result_all_wil,  file = here(results, paste(Sys.Date(), taxplot, daylabel,"Total VE303 Wilcox_Abun_Prop_Table S1.xlsx", sep = " ")) )
### FUNCTION
compare_cohorts_species_ttest <- function(V1, V1_tot, V2, V2_tot, specs){
tt_VE303tot_abun <- t.test(log10(V1_tot$ve303_tot + 0.00001), log10(V2_tot$ve303_tot + 0.00001))
pv_abun_tot <- tt_VE303tot_abun$p.value
stat_abun_tot <- tt_VE303tot_abun$statistic
tt_VE303tot_prop <- t.test( (V1_tot$ve303_tot_prop ),  (V2_tot$ve303_tot_prop ))
pv_prop_tot <- tt_VE303tot_prop$p.value
stat_prop_tot <- tt_VE303tot_prop$statistic
pv_prev_tot <- NA
stat_prev_tot <- NA
for (spec1 in specs) {
t_prev <- t.test(V1[V1$organism == spec1, ]$Ndet , V2[V2$organism == spec1, ]$Ndet )
pv_prev <- c(pv_prev, t_prev$p.value)
stat_prev <- c(stat_prev, t_prev$statistic)
t_abun <- t.test(log10(0.00001 + V1[V1$organism == spec1, ]$rel_abund) , log10(0.00001 + V2[V2$organism == spec1, ]$rel_abund))
pv_abun <- c(pv_abun, t_abun$p.value)
stat_abun <- c(stat_abun, t_abun$statistic)  }
pv_abun <- c(pv_abun, pv_abun_tot, pv_prop_tot)
stat_abun <- c(stat_abun, stat_abun_tot, stat_prop_tot)
qv_abun <- p.adjust(pv_abun, method = "BH")
pv_prev <- c(pv_prev, pv_prev_tot)
qv_prev <- p.adjust(pv_prev, method = "BH")
v_dum <- NA
stat_prev <- c(stat_prev, stat_prev_tot, v_dum)
pv_prev <- c(pv_prev,v_dum)
qv_prev <- c(qv_prev, v_dum)
specs_all <- c(specs, "Total VE303", "Total VE303 Proportion")
ttest_df <- data.frame(specs_all, pv_abun,qv_abun,stat_abun , pv_prev,qv_prev, stat_prev)
names(ttest_df) <- c("Species", "p-value Abundance","Adjusted p-value Abundance", "t-Statistic Abundance", "p-value Prevalence", "Adjusted p-value Prevalence", "t-Statistic Prevalence")
return(ttest_df) }
### FUNCTION
compare_cohorts_species_wilcoxtest <- function(V1, V1_tot, V2, V2_tot, specs){
tt_VE303tot_abun <- wilcox.test(log10(V1_tot$ve303_tot + 0.00001), log10(V2_tot$ve303_tot + 0.00001),conf.int = TRUE)
pv_abun_tot <- tt_VE303tot_abun$p.value
stat_abun_tot <- tt_VE303tot_abun$estimate
tt_VE303tot_prop <- wilcox.test( (V1_tot$ve303_tot_prop ),  (V2_tot$ve303_tot_prop ), conf.int = TRUE)
pv_prop_tot <- tt_VE303tot_prop$p.value
stat_prop_tot <- tt_VE303tot_prop$estimate
pv_prev_tot <- NA
stat_prev_tot <- NA
for (spec1 in specs) {
t_prev <- wilcox.test(V1[V1$organism == spec1, ]$Ndet , V2[V2$organism == spec1, ]$Ndet , conf.int = TRUE)
pv_prev <- c(pv_prev, t_prev$p.value)
stat_prev <- c(stat_prev, t_prev$estimate)
t_abun <- wilcox.test(log10(0.00001 + V1[V1$organism == spec1, ]$rel_abund) , log10(0.00001 + V2[V2$organism == spec1, ]$rel_abund), conf.int = TRUE)
pv_abun <- c(pv_abun, t_abun$p.value)
stat_abun <- c(stat_abun, t_abun$estimate)  }
pv_abun <- c(pv_abun, pv_abun_tot, pv_prop_tot)
stat_abun <- c(stat_abun, stat_abun_tot, stat_prop_tot)
qv_abun <- p.adjust(pv_abun, method = "BH")
pv_prev <- c(pv_prev, pv_prev_tot)
qv_prev <- p.adjust(pv_prev, method = "BH")
v_dum <- NA
stat_prev <- c(stat_prev, stat_prev_tot, v_dum)
pv_prev <- c(pv_prev,v_dum)
qv_prev <- c(qv_prev, v_dum)
specs_all <- c(specs, "Total VE303", "Total VE303 Proportion")
wilcox_df <- data.frame(specs_all, pv_abun,qv_abun,stat_abun , pv_prev,qv_prev, stat_prev)
names(wilcox_df) <- c("Species", "p-value Abundance","Adjusted p-value Abundance", "t-Statistic Abundance", "p-value Prevalence", "Adjusted p-value Prevalence", "t-Statistic Prevalence")
return(wilcox_df) }
VE303_sp1.all_PL <- VE303_sp1.all %>% filter(Treatment == "1")
VE303_sp1.all_LD <- VE303_sp1.all %>% filter(Treatment == "2")
VE303_sp1.all_HD <- VE303_sp1.all %>% filter(Treatment == "3")
VE303_sp1.all_PL$Ndet  <- sign(VE303_sp1.all_PL$rel_abund)
VE303_sp1.all_LD$Ndet  <- sign(VE303_sp1.all_LD$rel_abund)
VE303_sp1.all_HD$Ndet  <- sign(VE303_sp1.all_HD$rel_abund)
pv_abun <- c()
stat_abun <- c()
pv_prev <- c()
stat_prev <- c()
V1 <- VE303_sp1.all_LD
V1_tot <- VE303_sp1.total_LD
V2 <- VE303_sp1.all_HD
V2_tot <-VE303_sp1.total_HD
#VE303_sp1.total_PL
specs <- unique(VE303_sp.all$organism)
test_type <- "ttest"
ttest_all <- compare_cohorts_species_ttest(V1, V1_tot, V2, V2_tot, specs)
wiltest_all <- compare_cohorts_species_wilcoxtest(V1, V1_tot, V2, V2_tot, specs)
write.xlsx(ttest_all,  file = here(results, paste(Sys.Date(), taxplot, daylabel,"Species TTest_Abun_Prev_Table S1.xlsx", sep = " ")) )
ttest_all
